# Use the latest 2.1 version of CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1
orbs:
  webhook: eddiewebb/webhook@0.0.4

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/carrera-example-node # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/node # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - webhook/notify: # send webhook to sumo logic via (3rd party orb will need to be allowed at org level)
          endpoint: 'https://endpoint4.collection.us2.sumologic.com/receiver/v1/http/ZaVnC4dhaV0goor9h_Hz4aQEkjoQDFVsIFxPTLP-hSHKw_feSXS1BTjZrq2c65UYgBhdRpGaAKyM5NOLWGPU5yyAe3jr2gOaQjPhBxhumeicI0yHrbNFqg=='

      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest snyk'

      - run:
          name: install-snyk-html-report
          command: 'sudo npm install snyk-to-html -g'

      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-node-modules
          # Install using npm ci to reproduce package-lock.json exactly.
          command: npm ci
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Run jest tests
          command: npm run citest
          environment:
            JEST_JUNIT_OUTPUT: "test-results/jest/results.xml"

      - run: # run snyk monitor
          name: snyk monitor
          command: snyk monitor

      - run:
          name: Run snyk test and report
          command: snyk test --json | snyk-to-html -o results.html

      - run:
          name: Install Sonarqube scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
            unzip sonar-scanner-cli-3.2.0.1227-linux.zip
      - run:
          name: Run Sonarqube scanner
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            eval ./sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner -X \
              -Dsonar.projectKey=carrera-example-node \
              -Dsonar.sources=./src \
              -Dsonar.tests=./__tests__ \
              -Dsonar.sourceEncoding=UTF-8 \
              -Dsonar.exclusions=vendor/bundle/** \
              -Dsonar.typescript.lcov.reportPaths=./coverage/lcov.info \
              -Dsonar.testExecutionReportPaths=./test-results/jestSonar/test-results.xml \
              -Dsonar.host.url=http://34.73.164.186:9000 \
              -Dsonar.projectVersion=${CIRCLE_BRANCH} \
              -Dsonar.login=${SONARQUBE_TOKEN} | sed '/ANALYSIS/w ./test-results/jestSonar/sonarqube-output.log'
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: coverage
          prefix: coverage

      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          prefix: test-results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

      - store_artifacts:
          path: results.html
          destination: results.html

